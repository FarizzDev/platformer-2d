name: Export Godot Project

on:
  workflow_dispatch:
    inputs:
      godot_link:
        required: true
        default: "https://github.com/godotengine/godot/releases/download/3.6-stable/Godot_v3.6-stable_linux_headless.64.zip"
        description: "Enter Godot link:"
      templates_link:
        required: true
        default: "https://github.com/godotengine/godot/releases/download/3.6-stable/Godot_v3.6-stable_export_templates.tpz"
        description: "Enter Export Templates link:"
      preset_name:
        required: true
        default: "Android"
        description: "Enter platform:"
      debug:
        description: "Debug version"
        type: boolean
        default: false
      cache:
        description: "Cache"
        type: boolean
        default: true
      dname:
        description: "Display Name (for file names & CN)"
        required: true
        default: "GoduxExport"
      org:
        description: "Organization for Android (O)"
        required: false
        default: "Android"
      country:
        description: "2-letter Country Code for Android (C)"
        required: false
        default: "US"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GODOT_LINK: ${{ inputs.godot_link }}
      TEMPLATES_LINK: ${{ inputs.templates_link }}
      PLATFORM: ${{ inputs.preset_name }}
      KEYSTORE_PASS: ${{ secrets.KEYSTORE_PASS }}
      KEYSTORE_USER: ${{ secrets.KEYSTORE_USER }}
      DEBUG: ${{ inputs.debug }}
      CACHE: ${{ inputs.cache }}
      DNAME: ${{ inputs.dname }}
      ORG: ${{ inputs.org }}
      COUNTRY: ${{ inputs.country }}

    steps:
      - name: 🛒 Checkout repository
        uses: actions/checkout@v3

      - name: ⚙️ Prepare
        run: |
          if [ ! -f export_presets.cfg ]; then
            echo "Error: File export_presets.cfg not found."
            exit 1
          fi

          # Determine if any Android build is happening
          if [ "$PLATFORM" = "All" ]; then
            ISANDROID=$(grep -q 'platform="Android"' export_presets.cfg && echo "true")
          else
            # Check if the selected preset is an Android preset
            ISANDROID=$(awk -v preset_name="$PLATFORM" '
              BEGIN { FS = "[[:space:]]*=[[:space:]]*"; in_preset=0; is_android=0 }
              /^\[preset\./ { in_preset=0 }
              /^name[[:space:]]*=/ {
                n=$2; gsub(/"/, "", n)
                if (n == preset_name) in_preset=1
              }
              in_preset && /^platform[[:space:]]*=/ {
                p=$2; gsub(/"/, "", p)
                if (p == "Android") { is_android=1 }
              }
              END { if (is_android) print "true" }
            ' export_presets.cfg)
          fi

          echo "ISANDROID=${ISANDROID:-false}" >> "$GITHUB_ENV"

          VERSION=$(echo ${{ env.GODOT_LINK }} | sed -E 's|.*\/([0-9]+\.[0-9]+)-([a-z0-9]+).*|\1.\2|')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: 📝 Godot Export Templates Cache
        if: env.CACHE == 'true'
        uses: actions/cache@v4
        id: templates-cache
        with:
          path: ~/.local/share/godot/templates/${{ env.VERSION }}
          key: ${{ runner.os }}-godot-templates-${{ env.VERSION }}

      - name: 📥 Download Godot
        run: |
          wget $GODOT_LINK -O godot.zip
          unzip godot.zip
          sudo mv Godot_* /usr/local/bin/godot
          chmod +x /usr/local/bin/godot

      - name: 📤 Extract Godot Export Templates
        if: env.CACHE == 'false' || steps.templates-cache.outputs.cache-hit != 'true'
        run: |
          curl -L $TEMPLATES_LINK -o godot-templates.tpz
          mkdir -p ~/.local/share/godot/templates/${{ env.VERSION }}
          unzip godot-templates.tpz -d ~/godot-templates
          mv ~/godot-templates/templates/* ~/.local/share/godot/templates/${{ env.VERSION }}/
          rm -rf ~/godot-templates

      - name: 📱 Set up JDK (Only for Android)
        if: env.ISANDROID == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"

      - name: 📱 Set up Android SDK (Only for Android)
        if: env.ISANDROID == 'true'
        env:
          SKIP_JDK_VERSION_CHECK: true
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: "9.0"

      - name: 📝 Get Keystore Paths
        if: env.ISANDROID == 'true'
        run: |
          DEBUG_KEYSTORE_PATH=$(awk -F'=' '/keystore/debug=/{gsub(/"/, "", $2); gsub(/res:\/\//, "", $2); print $2}' export_presets.cfg | head -n 1)
          RELEASE_KEYSTORE_PATH=$(awk -F'=' '/keystore/release=/{gsub(/"/, "", $2); gsub(/res:\/\//, "", $2); print $2}' export_presets.cfg | head -n 1)
          echo "DEBUG_KEYSTORE_PATH=${DEBUG_KEYSTORE_PATH:-debug.keystore}" >> $GITHUB_ENV
          echo "RELEASE_KEYSTORE_PATH=${RELEASE_KEYSTORE_PATH:-release.keystore}" >> $GITHUB_ENV

      - name: 🔑 Setup Keystore (Only for Android)
        if: env.ISANDROID == 'true'
        env:
          RELEASE_KEYSTORE_BASE64: ${{ secrets.RELEASE_KEYSTORE_BASE64 }}
        run: |
          if [ -n "$RELEASE_KEYSTORE_BASE64" ]; then
            echo "Decoding and placing existing keystore at ${{ env.RELEASE_KEYSTORE_PATH }}"
            mkdir -p "$(dirname "${{ env.RELEASE_KEYSTORE_PATH }}")"
            echo "$RELEASE_KEYSTORE_BASE64" | base64 --decode > "${{ env.RELEASE_KEYSTORE_PATH }}"
          elif [ "${{ env.DEBUG }}" = "false" ]; then
            echo "Generating new release keystore at ${{ env.RELEASE_KEYSTORE_PATH }}"
            mkdir -p "$(dirname "${{ env.RELEASE_KEYSTORE_PATH }}")"
            keytool -genkey -v -keystore "${{ env.RELEASE_KEYSTORE_PATH }}" -alias "${{ env.KEYSTORE_USER }}" -storepass "${{ env.KEYSTORE_PASS }}" -keypass "${{ env.KEYSTORE_PASS }}" -dname "CN=${{ env.DNAME }},O=${{ env.ORG }},C=${{ env.COUNTRY }}" -keyalg RSA -keysize 2048 -validity 10000
          fi
          echo "Generating debug keystore at ${{ env.DEBUG_KEYSTORE_PATH }}"
          mkdir -p "$(dirname "${{ env.DEBUG_KEYSTORE_PATH }}")"
          keytool -genkey -v -keystore "${{ env.DEBUG_KEYSTORE_PATH }}" -alias androiddebugkey -storepass android -keypass android -dname "CN=${{ env.DNAME }} (Debug),O=Android,C=US" -keyalg RSA -keysize 2048 -validity 9000

      - name: 🛠 Export
        run: |
          mkdir -p export
          EXPORT_FLAG=$([[ "${{ env.DEBUG }}" == "true" ]] && echo "--export-debug" || echo "--export")

          # Function to determine Android extension based on the preset's content
          get_android_ext() {
            local preset_name="$1"
            local format=$(awk -v preset_name="$preset_name" '
              BEGIN { FS = "[[:space:]]*=[[:space:]]*"; in_preset=0; format="0" }
              /^\[preset\./ { in_preset=0 }
              /name/ && $2 == preset_name { in_preset=1 }
              in_preset && /custom_build\/export_format/ { format=$2; exit }
              END { print format }
            ' export_presets.cfg)

            if [[ "$format" == "1" ]]; then echo "aab"; else echo "apk"; fi
          }

          if [ "$PLATFORM" = "All" ]; then
            presets=$(awk '
              BEGIN { FS = "[[:space:]]*=[[:space:]]*" }
              /^\[preset\./ { if (n&&p) print n"|"p; n=""; p="" }
              /^name/ { n=$2; gsub(/"/, "",n) }
              /^platform/ { p=$2; gsub(/"/, "",p) }
              END { if (n&&p) print n"|"p }
            ' export_presets.cfg)

            while IFS='|' read -r preset_name platform_type; do
              echo "Exporting '$preset_name'..."
              subfolder=$(echo "$platform_type" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]' | sed 's|/x11||')
              mkdir -p "export/$subfolder"
              
              OUTPUT_PATH="export/$subfolder/${{ env.DNAME }}"
              case "$platform_type" in
                "Android") EXT=$(get_android_ext "$preset_name"); OUTPUT_PATH="export/$subfolder/${{ env.DNAME }}.$EXT" ;; 
                "Windows Desktop") OUTPUT_PATH="export/$subfolder/${{ env.DNAME }}.exe" ;; 
                "Linux/X11") OUTPUT_PATH="export/$subfolder/${{ env.DNAME }}" ;; 
                "HTML5") OUTPUT_PATH="export/$subfolder/index.html" ;; 
                "Mac OSX") OUTPUT_PATH="export/$subfolder/${{ env.DNAME }}.zip" ;; 
              esac
              
              godot $EXPORT_FLAG "$preset_name" "$OUTPUT_PATH"
            done <<< "$presets"

          else
            TARGET_PRESET=$(awk -v ref="$PLATFORM" '
              /^\[preset\./ { n=""; p="" }
              /^name=/      { n=$0; gsub(/.*="/,"",n); gsub(/".*/,"",n) }
              /^platform=/  { p=$0; gsub(/.*="/,"",p); gsub(/".*/,"",p) }
              n==ref && p { print p; exit }
            ' export_presets.cfg)
            subfolder=$(echo "$PLATFORM" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]' | sed 's|/x11||' | sed 's|android2|android|') # Normalize subfolder
            mkdir -p "export/$subfolder"
            
            OUTPUT_PATH="export/$subfolder/${{ env.DNAME }}"
            if [[ "$TARGET_PRESET" == "Android"* ]]; then
              EXT=$(get_android_ext "$TARGET_PRESET")
              OUTPUT_PATH="export/android/${{ env.DNAME }}.$EXT"
            elif [ "$TARGET_PRESET" = "Windows Desktop" ]; then
              OUTPUT_PATH="export/windows/${{ env.DNAME }}.exe"
            elif [ "$TARGET_PRESET" = "Linux/X11" ]; then
              OUTPUT_PATH="export/linux/${{ env.DNAME }}"
            elif [ "$TARGET_PRESET" = "HTML5" ]; then
              OUTPUT_PATH="export/html5/index.html"
            elif [ "$TARGET_PRESET" = "Mac OSX" ]; then
              OUTPUT_PATH="export/macosx/${{ env.DNAME }}.zip"
            fi
            
            godot --verbose $EXPORT_FLAG "$PLATFORM" "$OUTPUT_PATH"
          fi

          if [[ "$ISANDROID" == "true" && "${{ env.DEBUG }}" == "false" ]]; then
            cp "${{ env.RELEASE_KEYSTORE_PATH }}" export/android/
          fi
          zip -r -7 "${{ env.DNAME }}.zip" export/

      - name: 🚀 Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create "build-${{ github.run_id }}" "${{ env.DNAME }}.zip" --notes "Automated build from GitHub Actions"
