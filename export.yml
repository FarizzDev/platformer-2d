name: Export Godot Project

on:
  workflow_dispatch:
    inputs:
      godot_link:
        required: true
        default: "https://github.com/godotengine/godot/releases/download/3.6-stable/Godot_v3.6-stable_linux_headless.64.zip"
        description: "Enter Godot link:"
      templates_link:
        required: true
        default: "https://github.com/godotengine/godot/releases/download/3.6-stable/Godot_v3.6-stable_export_templates.tpz"
        description: "Enter Export Templates link:"
      platform:
        required: true
        default: "Android"
        description: "Enter platform:"
        type: choice
        options:
          - "Android"
          - "iOS"
          - "HTML5"
          - "Mac OSX"
          - "UWP"
          - "Windows Desktop"
          - "Linux/X11"
          - "All"
      debug:
        description: "Debug version"
        type: boolean
        default: false
      cache:
        description: "Cache"
        type: boolean
        default: true
      dname:
        description: "Display Name (for file names & CN)"
        required: true
        default: "GoduxExport"
      org:
        description: "Organization for Android (O)"
        required: false
        default: "Android"
      country:
        description: "2-letter Country Code for Android (C)"
        required: false
        default: "US"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GODOT_LINK: ${{ inputs.godot_link }}
      TEMPLATES_LINK: ${{ inputs.templates_link }}
      PLATFORM: ${{ inputs.platform }}
      KEYSTORE_PASS: ${{ secrets.KEYSTORE_PASS }}
      KEYSTORE_USER: ${{ secrets.KEYSTORE_USER }}
      DEBUG: ${{ inputs.debug }}
      CACHE: ${{ inputs.cache }}
      DNAME: ${{ inputs.dname }}
      ORG: ${{ inputs.org }}
      COUNTRY: ${{ inputs.country }}

    steps:
      - name: 🛒 Checkout repository
        uses: actions/checkout@v3

      - name: ⚙️ Preapare
        run: |
          if [ ! -f export_presets.cfg ]; then
            echo "Error: File export_presets.cfg not found."
            exit 1
          fi

          if [ "$PLATFORM" = "All" ]; then
            ISANDROID=$(awk -F= '
              BEGIN { IGNORECASE=1 }
              /^\[preset\.[0-9]+\]$/ { in_preset=1; next }
              /^\[/ && $0 !~ /^\[preset\.[0-9]+\]$/ { in_preset=0 }
              in_preset && /platform/ && $2 ~ /Android/ { print "true"; exit }
            ' export_presets.cfg)
          else
            ISANDROID=$(awk -F= -v target="$PLATFORM" '
              BEGIN { IGNORECASE=1 }
              /^\[preset\.[0-9]+\]$/ { in_preset=1; found_name=0; next }
              /^\[/ && $0 !~ /^\[preset\.[0-9]+\]$/ { in_preset=0 }

              in_preset && $1 ~ /name/ && $2 ~ "\"" target "\"" { found_name=1 }
              in_preset && found_name && $1 ~ /platform/ && $2 ~ /Android/ {
                print "true"; exit
              }
            ' export_presets.cfg)
          fi

          echo "ISANDROID=${ISANDROID:-false}" >> "$GITHUB_ENV"

          VERSION=$(echo ${{ env.GODOT_LINK }} | sed -E 's|.*\/([0-9]+\.[0-9]+)-([a-z0-9]+).*|\1.\2|')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: 📝 Godot Export Templates Cache
        if: env.CACHE == 'true'
        uses: actions/cache@v4
        id: templates-cache
        with:
          path: ~/.local/share/godot/templates/${{ env.VERSION }}
          key: ${{ runner.os }}-godot-templates-${{ env.VERSION }}

      - name: 📥 Download Godot
        run: |
          wget $GODOT_LINK -O godot.zip
          unzip godot.zip
          sudo mv Godot_* /usr/local/bin/godot
          chmod +x /usr/local/bin/godot

      - name: 📤 Extract Godot Export Templates
        if: env.CACHE == 'false' || steps.templates-cache.outputs.cache-hit != 'true'
        run: |
          curl -L $TEMPLATES_LINK -o godot-templates.tpz
          mkdir -p ~/.local/share/godot/templates/${{ env.VERSION }}
          unzip godot-templates.tpz -d ~/godot-templates
          mv ~/godot-templates/templates/* ~/.local/share/godot/templates/${{ env.VERSION }}/
          rm -rf ~/godot-templates

      - name: 📱 Set up JDK (Only for Android)
        if: env.ISANDROID == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: 📱 Set up Android SDK (Only for Android)
        if: env.ISANDROID == 'true'
        uses: android-actions/setup-android@v3

      - name: 📝 Get Keystore Paths
        if: env.ISANDROID == 'true'
        run: |
          DEBUG_KEYSTORE_PATH=$(awk -F'=' '/keystore\/debug=/{gsub(/"/, "", $2); gsub(/res:\/\//, "", $2); print $2}' export_presets.cfg | head -n 1)
          RELEASE_KEYSTORE_PATH=$(awk -F'=' '/keystore\/release=/{gsub(/"/, "", $2); gsub(/res:\/\//, "", $2); print $2}' export_presets.cfg | head -n 1)
          echo "DEBUG_KEYSTORE_PATH=${DEBUG_KEYSTORE_PATH:-debug.keystore}" >> $GITHUB_ENV
          echo "RELEASE_KEYSTORE_PATH=${RELEASE_KEYSTORE_PATH:-release.keystore}" >> $GITHUB_ENV
          echo "Debug Keystore Path: ${DEBUG_KEYSTORE_PATH:-debug.keystore}"
          echo "Release Keystore Path: ${RELEASE_KEYSTORE_PATH:-release.keystore}"

      - name: 🔑 Setup Keystore (Only for Android)
        if: env.ISANDROID == 'true'
        env:
          RELEASE_KEYSTORE_BASE64: ${{ secrets.RELEASE_KEYSTORE_BASE64 }}
        run: |
          # This step uses the paths discovered in the 'Get Keystore Paths' step
          # If an existing keystore was provided, decode it to the release path
          if [ -n "$RELEASE_KEYSTORE_BASE64" ]; then
            echo "Found existing keystore. Decoding and placing at ${{ env.RELEASE_KEYSTORE_PATH }}"
            mkdir -p "$(dirname "${{ env.RELEASE_KEYSTORE_PATH }}")"
            echo "$RELEASE_KEYSTORE_BASE64" | base64 --decode > "${{ env.RELEASE_KEYSTORE_PATH }}"

          # Otherwise, generate a new one at the release path
          else
            echo "No existing keystore found. Generating a new one at ${{ env.RELEASE_KEYSTORE_PATH }}"
            mkdir -p "$(dirname "${{ env.RELEASE_KEYSTORE_PATH }}")"
            keytool -genkey -v \
              -keystore "${{ env.RELEASE_KEYSTORE_PATH }}" \
              -alias "${{ env.KEYSTORE_USER }}" \
              -storepass "${{ env.KEYSTORE_PASS }}" -keypass "${{ env.KEYSTORE_PASS }}" \
              -dname "CN=${{ env.DNAME }},O=${{ env.ORG }},C=${{ env.COUNTRY }}" \
              -keyalg RSA -keysize 2048 -validity 10000
          fi

          # Always generate a fresh debug keystore at its path
          echo "Generating debug keystore at ${{ env.DEBUG_KEYSTORE_PATH }}"
          mkdir -p "$(dirname "${{ env.DEBUG_KEYSTORE_PATH }}")"
          keytool -genkey -v \
            -keystore "${{ env.DEBUG_KEYSTORE_PATH }}" \
            -alias androiddebugkey \
            -storepass android -keypass android \
            -dname "CN=${{ env.DNAME }} (Debug),O=Android,C=US" \
            -keyalg RSA -keysize 2048 -validity 9000

      - name: 🛠 Export
        run: |
          mkdir -p export

          # Set export flag
          if [ ${{ env.DEBUG }} = "true" ]; then
            EXPORT_FLAG="--export-debug"
          else
            EXPORT_FLAG="--export"
          fi

          if [ "$PLATFORM" = "All" ]; then
            presets=$(awk '
              BEGIN { FS = "[[:space:]]*=[[:space:]]*" }
              /^\[preset\./ { if (n&&p) print n"|"p; n=""; p="" }
              /^name/ { n=$2; gsub(/"/,"",n) }
              /^platform/ { p=$2; gsub(/"/,"",p) }
              END { if (n&&p) print n"|"p }
            ' export_presets.cfg)

            while IFS='|' read -r preset_name platform_type; do
              echo "Exporting '$preset_name'..."
              subfolder=$(echo "$platform_type" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]' | sed 's|/x11||')
              mkdir -p "export/$subfolder"
              
              case "$platform_type" in
                "Android") OUTPUT_PATH="export/$subfolder/${{ env.DNAME }}.apk" ;;
                "Windows Desktop") OUTPUT_PATH="export/$subfolder/${{ env.DNAME }}.exe" ;;
                "Linux/X11") OUTPUT_PATH="export/$subfolder/${{ env.DNAME }}" ;;
                "HTML5") OUTPUT_PATH="export/$subfolder/index.html" ;;
                "Mac OSX") OUTPUT_PATH="export/$subfolder/${{ env.DNAME }}.zip" ;;
                *) OUTPUT_PATH="export/$subfolder/${{ env.DNAME }}" ;;
              esac
              
              godot "$EXPORT_FLAG" "$preset_name" "$OUTPUT_PATH"
            done <<< "$presets"

          else
            subfolder=$(echo "$PLATFORM" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]' | sed 's|/x11||')
            mkdir -p "export/$subfolder"
            
            case "$PLATFORM" in
              "Android") OUTPUT_PATH="export/$subfolder/${{ env.DNAME }}.apk" ;;
              "Windows Desktop") OUTPUT_PATH="export/$subfolder/${{ env.DNAME }}.exe" ;;
              "Linux/X11") OUTPUT_PATH="export/$subfolder/${{ env.DNAME }}" ;;
              "HTML5") OUTPUT_PATH="export/$subfolder/index.html" ;;
              "Mac OSX") OUTPUT_PATH="export/$subfolder/${{ env.DNAME }}.zip" ;;
              *) OUTPUT_PATH="export/$subfolder/${{ env.DNAME }}" ;;
            esac
            
            godot "$EXPORT_FLAG" "$PLATFORM" "$OUTPUT_PATH"
          fi

          if [[ -f "${{ env.RELEASE_KEYSTORE_PATH }}" && "$ISANDROID" == "true" ]]; then
            cp "${{ env.RELEASE_KEYSTORE_PATH }}" export/android/
          fi
          zip -r -7 "${{ env.DNAME }}.zip" export/

      - name: 🚀 Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create "build-${{ github.run_id }}" "${{ env.DNAME }}.zip" --notes "Automated build from GitHub Actions"
